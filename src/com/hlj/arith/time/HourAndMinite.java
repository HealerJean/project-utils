package com.hlj.arith.time;

/**
 * @author : HealerJean
 * @date   ： 2017年11月23日 下午3:18:37 
 * @Description:
 * 
虽然分针走一圈,会和时针重叠一次,但是分针走的时候,时针并不是静止不动的；
原来分针每走12圈,时针自己也要走一圈；因此,对时针来说,分针只绕时针走了11圈.
当分针走了24圈的时候,时针也走了2圈；因此,分针绕时针只走了22圈,所以只重叠22次.

所以算上起点时重合的一次，分针会遇上时针23次。
 */
public class HourAndMinite {

	/**
	 * 
	 * @author :HealerJean: 
	 * @date   :2017年11月23日 下午3:22:27 
	 * @Description: 
	分针为计算单位
	时针 小时r每分钟走 360/12（个标志位）/60（分钟） = 0.5度
	分针 360/60 = 6 度
	
	秒针为计算单位
	小时 0.5/60
	分针 6/60
	秒针 6
	 * @param args    
	 * void
	 */
	
	
	   /** 
     * @param args 
     */  
    public static void main(String[] args) {  
        int count =0;  
        for(int h=1; h<=12; h++){   //从第一小时开始算，不算12点开始重合的次数
            for(int m=0; m<=60; m++){  
            	//这里是最关键的， 因为小时走的度数不可能都是整数30*h，这里为了方便计算
            	// 给分钟变慢 变成6度-0.5度 =这样就相当于是以时针不变，分钟在动。
                double gap = (30 * h - 5.5 * m) % 360; 
  
                ////分针一直在追赶时针和，那在接近重合的合时候的夹角不会超过6度，并且为正
                if(0 < gap && gap < 6.0){  
                
                    System.out.println(h + ":" + m);  
                    count++;  
                } 
            }
        }
        System.out.println("共重合：" + count +"次");   //22
        //结果出现了11.59 这里很明确应该是12点 随意这个时候需要改掉
    }  
    

    
  /**
1:5:27.3,
2:10:54.5,
3:16:21.8,
4:21:49.1,
5:27:16.4,
6:32:43.6,
7:38:10.9,
8:43:38.2,
9:49:5.5,
10:54:32.7,
12:0:0.

1:5
2:10
3:16
4:21
5:27
6:32
7:38
8:43
9:49
10:54
	11:59 //应该是12：00
13:5
14:10
15:16
16:21
17:27
18:32
19:38
20:43
21:49
22:54
	23:59 应该是24：00
共重合：22次
   */



}  